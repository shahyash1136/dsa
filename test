import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import Autocomplete from '@mui/material/Autocomplete';
import Checkbox from '@mui/material/Checkbox';
import Chip from '@mui/material/Chip';

describe('Autocomplete Component', () => {
  const options = ['Option 1', 'Option 2', 'Option 3'];
  const mockRenderOption = jest.fn((props, option, { selected }) => {
    return (
      <li {...props}>
        <Checkbox
          checked={selected}
        />
        {option}
      </li>
    );
  });

  const mockRenderTags = jest.fn((tagValue, getTagProps) =>
    tagValue.map((option, index) => {
      return (
        <Chip key={index} label={option} {...getTagProps({ index })} />
      );
    })
  );

  it('renders options correctly with Checkbox', () => {
    render(
      <Autocomplete
        multiple
        options={options}
        disableCloseOnSelect
        renderOption={mockRenderOption}
        renderTags={mockRenderTags}
      />
    );

    // Open the dropdown
    const input = screen.getByRole('combobox');
    userEvent.click(input);

    // Verify that all options are rendered
    options.forEach((option) => {
      expect(screen.getByText(option)).toBeInTheDocument();
    });

    // Verify that renderOption is called with correct arguments
    expect(mockRenderOption).toHaveBeenCalledWith(expect.any(Object), 'Option 1', { selected: false });
    expect(mockRenderOption).toHaveBeenCalledWith(expect.any(Object), 'Option 2', { selected: false });
  });

  it('renders selected options as Chips', () => {
    render(
      <Autocomplete
        multiple
        options={options}
        value={['Option 1', 'Option 2']}
        disableCloseOnSelect
        renderOption={mockRenderOption}
        renderTags={mockRenderTags}
      />
    );

    // Check that selected options are rendered as Chips
    expect(screen.getByText('Option 1')).toBeInTheDocument();
    expect(screen.getByText('Option 2')).toBeInTheDocument();

    // Ensure the renderTags function is called with correct arguments
    expect(mockRenderTags).toHaveBeenCalled();
  });
});
