import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect'; // for additional matchers
import CountryOfDomicile from './CountryOfDomicile';
import * as useSearchSuggestionsHook from '../../hooks/useSearchSuggestions'; // Mock the hook
import SearchBar from '../../SearchBar/SearchBar'; // Mocked component

// Mock useSearchSuggestions to return specific values
jest.mock('../../hooks/useSearchSuggestions');
jest.mock('../../SearchBar/SearchBar', () => jest.fn(() => <div data-testid="mock-search-bar" />));

describe('CountryOfDomicile Component', () => {
  const mockHandleSelectionChange = jest.fn();
  const mockHandleInputChange = jest.fn();

  beforeEach(() => {
    // Mock the return values of the useSearchSuggestions hook
    useSearchSuggestionsHook.default.mockReturnValue({
      suggestionList: [{ value: 'Country 1' }, { value: 'Country 2' }],
      loading: false,
      selectedValues: [],
      searchTerm: '',
      handleSelectionChange: mockHandleSelectionChange,
      handleInputChange: mockHandleInputChange,
    });
  });

  afterEach(() => {
    jest.clearAllMocks(); // Reset mock data after each test
  });

  test('renders the SearchBar component', () => {
    render(<CountryOfDomicile multiple={true} />);

    // Verify if the SearchBar component is rendered
    const searchBarElement = screen.getByTestId('mock-search-bar');
    expect(searchBarElement).toBeInTheDocument();
  });

  test('passes the correct props to SearchBar component', () => {
    render(<CountryOfDomicile multiple={true} />);

    // Verify if SearchBar has received the correct props
    expect(SearchBar).toHaveBeenCalledWith(
      expect.objectContaining({
        suggestions: [{ value: 'Country 1' }, { value: 'Country 2' }],
        Loading: false,
        selectedValues: [],
        searchTerm: '',
        multiple: true,
        label: 'Country Of Domicile',
        placeholder: 'Country Of Domicile',
        Limit: true,
        handleSelectionChange: mockHandleSelectionChange,
        handleInputChange: mockHandleInputChange,
      }),
      {}
    );
  });

  test('handles the mapping of suggestions correctly', () => {
    render(<CountryOfDomicile multiple={true} />);

    // Verify if the suggestions are correctly mapped
    const mappedSuggestions = useSearchSuggestionsHook.default().suggestionList.map(el => el.value);
    expect(mappedSuggestions).toEqual(['Country 1', 'Country 2']);
  });

  test('calls handleSelectionChange when selection changes', () => {
    render(<CountryOfDomicile multiple={true} />);

    // Simulate the selection change
    fireEvent.change(screen.getByTestId('mock-search-bar'), {
      target: { value: 'Country 1' },
    });

    expect(mockHandleSelectionChange).toHaveBeenCalled();
  });

  test('calls handleInputChange when input changes', () => {
    render(<CountryOfDomicile multiple={true} />);

    // Simulate the input change
    fireEvent.input(screen.getByTestId('mock-search-bar'), {
      target: { value: 'C' },
    });

    expect(mockHandleInputChange).toHaveBeenCalled();
  });

  test('displays loading state when loading is true', () => {
    useSearchSuggestionsHook.default.mockReturnValue({
      suggestionList: [],
      loading: true,
      selectedValues: [],
      searchTerm: '',
      handleSelectionChange: mockHandleSelectionChange,
      handleInputChange: mockHandleInputChange,
    });

    render(<CountryOfDomicile multiple={true} />);

    // Check if loading state is passed correctly
    expect(SearchBar).toHaveBeenCalledWith(
      expect.objectContaining({
        Loading: true,
      }),
      {}
    );
  });
});
