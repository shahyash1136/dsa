it('should pass the correct suggestions to SearchBar when suggestionsList is populated after API call', async () => {
  // Initial mock return value with an empty suggestionsList and loading set to false
  useSearchSuggestions.mockReturnValue({
    handleSelectionChange: mockHandleSelectionChange,
    handleInputChange: mockHandleInputChange,
    suggestionsList: [], // Initially empty
    loading: false, // Loader is not active initially
    selectedValues: [],
    searchTerm: ''
  });

  // Render the component
  render(<MyComponent multiple={true} />);

  // Simulate typing to trigger the API call
  const input = screen.getByPlaceholderText('Type to search...');
  fireEvent.change(input, { target: { value: 'test input' } });

  // Ensure loader is not displayed initially since loading is false
  expect(screen.queryByRole('progressbar')).not.toBeInTheDocument();

  // Simulate API call and loading
  useSearchSuggestions.mockReturnValueOnce({
    handleSelectionChange: mockHandleSelectionChange,
    handleInputChange: mockHandleInputChange,
    suggestionsList: [], // Still empty while API is fetching data
    loading: true, // Loader active when data is fetching
    selectedValues: [],
    searchTerm: 'test input'
  });

  // Rerender to reflect the loader state during API call
  render(<MyComponent multiple={true} />);

  // Ensure loader is displayed when loading is true
  expect(screen.getByRole('progressbar')).toBeInTheDocument();

  // Simulate a wait for the API call to resolve and return data
  useSearchSuggestions.mockReturnValueOnce(new Promise((resolve) => {
    setTimeout(() => {
      resolve({
        handleSelectionChange: mockHandleSelectionChange,
        handleInputChange: mockHandleInputChange,
        suggestionsList: [
          { value: 'suggestion1' },
          { value: 'suggestion2' }
        ], // Data received from API
        loading: false, // Loader stops once data is fetched
        selectedValues: [],
        searchTerm: 'test input'
      });
    }, 100); // Simulating network delay
  }));

  // Wait for the suggestions to be updated
  await screen.findByText('suggestion1'); // This will wait until suggestion1 appears

  // Ensure the loading indicator is no longer displayed
  expect(screen.queryByRole('progressbar')).not.toBeInTheDocument();

  // Verify the suggestions are passed to the SearchBar correctly
  const searchBar = screen.getByTestId('my-component-search-bar');
  expect(searchBar).toBeInTheDocument();

  // Check if the suggestions are passed to SearchBar as expected
  expect(screen.getByText('suggestion1')).toBeInTheDocument();
  expect(screen.getByText('suggestion2')).toBeInTheDocument();
});
