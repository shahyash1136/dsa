import React, { useState, useCallback, useEffect } from "react";
import useDebounce from "./useDebounce";

const useSearchSuggestion = (callbackFn, multiple, initialSuggestions = []) => {
  const [searchQuery, setSearchQuery] = useState("");
  const [loading, setLoading] = useState(false);
  const [suggestionList, setSuggestionList] = useState(initialSuggestions);
  const debounceValue = useDebounce(searchQuery, 1000);
  const [selectedValues, setSelectedValues] = useState(multiple ? [] : null);
  const [searchTerm, setSearchTerm] = useState("");
  const [isSelecting, setIsSelecting] = useState(false);

  // Fetch suggestions based on debounced value
  const fetchSuggestion = useCallback(async () => {
    if (!debounceValue) return;  // Prevent fetch if query is empty
    setLoading(true);
    
    try {
      const res = await callbackFn({ query: debounceValue });
      setSuggestionList(res);
    } catch (err) {
      console.error("Error fetching suggestions:", err);
    } finally {
      setLoading(false);
    }
  }, [debounceValue, callbackFn]);

  // Effect to trigger suggestion fetching when debounceValue changes
  useEffect(() => {
    if (debounceValue) {
      fetchSuggestion();
    } else {
      setSuggestionList([]);  // Clear suggestions if the input is empty
    }
  }, [debounceValue, fetchSuggestion]);

  // Handle the selection change
  const handleSelectionChange = useCallback(
    (event, newValue) => {
      setIsSelecting(true);
      setSelectedValues(newValue);
      setTimeout(() => setIsSelecting(false), 0);
    },
    [multiple]
  );

  // Handle input change
  const handleInputChange = useCallback(
    (event) => {
      const newQuery = event.target.value;
      setSearchTerm(newQuery);

      if (!isSelecting) {
        setSearchQuery(newQuery);  // Set search query to trigger debounce

        if (newQuery === "") {
          setLoading(false);
          setSuggestionList([]);  // Clear suggestions when input is empty
        } else {
          setLoading(true);  // Start loading when there's a new query
        }

        if (!multiple) {
          setSelectedValues(null);  // Reset selected values for single-select
        }
      }
    },
    [isSelecting, multiple]
  );

  return {
    suggestionList,
    loading,
    selectedValues,
    searchTerm,
    handleSelectionChange,
    handleInputChange,
  };
};

export default useSearchSuggestion;
