import React from "react";
import { render, fireEvent, screen, waitFor } from "@testing-library/react";
import SearchBar from "./SearchBar"; // Adjust the path based on your file structure
import { CircularProgress } from "@mui/material";

// Mock necessary utilities and components
jest.mock("../../../common/utils", () => ({
  getHighlightedText: jest.fn((text) => text),
  formatedDataTestId: jest.fn((text) => `formatted-${text}`),
}));

describe("SearchBar Component", () => {
  const handleSelectionChange = jest.fn();
  const handleInputChange = jest.fn();
  const defaultSuggestions = ["Option 1", "Option 2"];
  const defaultProps = {
    handleSelectionChange,
    handleInputChange,
    suggestions: defaultSuggestions,
    multiple: true,
    selecetedValues: [],
    searchTerm: "Option",
    label: "Search Label",
    placeholder: "Search here...",
    loading: false,
  };

  const renderComponent = (props = {}) =>
    render(<SearchBar {...defaultProps} {...props} />);

  afterEach(() => {
    jest.clearAllMocks();
  });

  // Test 1: Basic Rendering with Default Props
  test("renders with default props", () => {
    renderComponent();
    expect(screen.getByLabelText(/search label/i)).toBeInTheDocument();
    expect(screen.getByPlaceholderText(/search here/i)).toBeInTheDocument();
    expect(screen.getByTestId("formatted-Search here...")).toBeInTheDocument();
  });

  // Test 2: Input Change Event and Loader (Simulating API Call)
  test("renders loader and triggers API call on typing", async () => {
    // Mocking handleInputChange to simulate API call and loading state
    const handleInputChangeMock = jest.fn().mockImplementation((e) => {
      // Simulate async API call by changing the loading prop
      defaultProps.loading = true;
      setTimeout(() => {
        defaultProps.loading = false;
      }, 500);
    });

    renderComponent({ handleInputChange: handleInputChangeMock });

    const input = screen.getByPlaceholderText(/search here/i);
    
    // Simulate typing in the input field
    fireEvent.change(input, { target: { value: "new value" } });

    // Expect loading spinner to appear immediately
    expect(screen.getByRole("progressbar")).toBeInTheDocument();

    // Wait for the mock API call to "complete"
    await waitFor(() => {
      expect(screen.queryByRole("progressbar")).not.toBeInTheDocument();
    });

    // Verify the input change handler was called
    expect(handleInputChangeMock).toHaveBeenCalledWith(expect.any(Object));
  });

  // Test 3: Handling Option Selection
  test("renders options and calls handleSelectionChange on selection", () => {
    renderComponent();
    const input = screen.getByPlaceholderText(/search here/i);
    fireEvent.click(input);

    const option = screen.getByText(/Option 1/i);
    fireEvent.click(option);
    expect(handleSelectionChange).toHaveBeenCalledWith(
      expect.any(Object),
      defaultSuggestions[0],
      expect.anything()
    );
  });

  // Test 4: Displays loading indicator when loading is true
  test("displays loading indicator when loading is true", () => {
    renderComponent({ loading: true });
    expect(screen.getByRole("progressbar")).toBeInTheDocument();
    expect(screen.queryByTestId("Search")).not.toBeInTheDocument();
  });

  // Test 5: Renders checkboxes for multiple selections
  test("renders checkboxes for multiple selections", () => {
    renderComponent();
    const input = screen.getByPlaceholderText(/search here/i);
    fireEvent.click(input);

    const checkboxes = screen.getAllByRole("checkbox");
    expect(checkboxes.length).toBe(2); // Based on defaultSuggestions
  });

  // Test 6: Renders chips when multiple is true
  test("renders chips when multiple is true", () => {
    const selectedValues = ["Option 1", "Option 2"];
    renderComponent({ selecetedValues: selectedValues });

    selectedValues.forEach((value) => {
      expect(screen.getByText(value)).toBeInTheDocument();
    });
  });

  // Test 7: Limits tags when limit is true
  test("limits tags when limit is true", () => {
    const selectedValues = ["Option 1", "Option 2", "Option 3"];
    renderComponent({ selecetedValues: selectedValues, limit: true });

    expect(screen.getAllByRole("button").length).toBe(2); // Since limit is 2
  });

  // Test 8: Renders without crashing when no suggestions
  test("renders without crashing when no suggestions", () => {
    renderComponent({ suggestions: [] });
    const input = screen.getByPlaceholderText(/search here/i);
    fireEvent.click(input);
    expect(screen.queryByRole("listbox")).not.toBeInTheDocument();
  });

  // Test 9: Correctly renders search icon when loading is false
  test("renders search icon when not loading", () => {
    renderComponent();
    expect(screen.getByTestId("Search")).toBeInTheDocument();
    expect(screen.queryByRole("progressbar")).not.toBeInTheDocument();
  });

  // Test 10: Correctly formats data-testid using formatedDataTestId utility
  test("uses formatedDataTestId for test id", () => {
    renderComponent();
    expect(screen.getByTestId("formatted-Search here...")).toBeInTheDocument();
  });
});
