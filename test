it('should pass the correct suggestions to SearchBar when suggestionsList is populated after API call', async () => {
  // Initial mock return value with an empty suggestionsList and loading state as true
  useSearchSuggestions.mockReturnValue({
    handleSelectionChange: mockHandleSelectionChange,
    handleInputChange: mockHandleInputChange,
    suggestionsList: [], // Initially empty
    loading: true, // Loader active before data is fetched
    selectedValues: [],
    searchTerm: ''
  });

  // Render the component
  render(<MyComponent multiple={true} />);

  // Simulate typing to trigger the API call
  const input = screen.getByPlaceholderText('Type to search...');
  fireEvent.change(input, { target: { value: 'test input' } });

  // Check if the loader is displayed while loading
  expect(screen.getByRole('progressbar')).toBeInTheDocument();

  // After the API call, simulate the suggestions being populated
  useSearchSuggestions.mockReturnValueOnce({
    handleSelectionChange: mockHandleSelectionChange,
    handleInputChange: mockHandleInputChange,
    suggestionsList: [
      { value: 'suggestion1' },
      { value: 'suggestion2' }
    ], // Data received from API
    loading: false, // Loader stops once data is fetched
    selectedValues: [],
    searchTerm: 'test input'
  });

  // Re-render to reflect the updated state with populated suggestions
  render(<MyComponent multiple={true} />);

  // Ensure the loading indicator is gone
  expect(screen.queryByRole('progressbar')).not.toBeInTheDocument();

  // Verify the suggestions are passed to the SearchBar correctly
  const searchBar = screen.getByTestId('my-component-search-bar');
  expect(searchBar).toBeInTheDocument();

  // Check if the suggestions are passed to SearchBar as expected
  expect(mockSuggestionsList.map(el => el.value)).toEqual(['suggestion1', 'suggestion2']);

  // Ensure suggestions are displayed in the Autocomplete component
  expect(screen.getByText('suggestion1')).toBeInTheDocument();
  expect(screen.getByText('suggestion2')).toBeInTheDocument();
});
