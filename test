import { renderHook, act } from '@testing-library/react-hooks';
import { useDispatch } from 'react-redux';
import useInputValue from './useInputValue'; // Adjust the import based on your file structure
import useDebounce from './useDebounce'; // Import your debounce hook

jest.mock('react-redux', () => ({
  useDispatch: jest.fn(),
}));

jest.mock('./useDebounce');

describe('useInputValue', () => {
  const mockDispatch = jest.fn();
  const mockAction = jest.fn();

  beforeEach(() => {
    useDispatch.mockReturnValue(mockDispatch);
    jest.clearAllMocks();
  });

  it('should initialize inputValue as an empty string', () => {
    const { result } = renderHook(() => useInputValue(mockAction));

    expect(result.current.inputValue).toBe('');
  });

  it('should update inputValue on input change', () => {
    const { result } = renderHook(() => useInputValue(mockAction));

    act(() => {
      result.current.handleInputChange({ target: { value: 'test' } });
    });

    expect(result.current.inputValue).toBe('test');
  });

  it('should call dispatch with action when debounceValue changes', () => {
    useDebounce.mockReturnValue('debouncedValue'); // Mock the debounce return value
    const { result } = renderHook(() => useInputValue(mockAction));

    act(() => {
      result.current.handleInputChange({ target: { value: 'test' } });
    });

    act(() => {
      // Simulate debounce effect
      result.rerender();
    });

    expect(mockDispatch).toHaveBeenCalledWith(mockAction('debouncedValue'));
  });

  it('should not call dispatch if debounceValue is empty', () => {
    useDebounce.mockReturnValue(''); // Simulate empty debounce value
    const { result } = renderHook(() => useInputValue(mockAction));

    act(() => {
      result.current.handleInputChange({ target: { value: 'test' } });
    });

    act(() => {
      // Simulate debounce effect
      result.rerender();
    });

    expect(mockDispatch).not.toHaveBeenCalled();
  });
});
