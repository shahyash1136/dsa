// TextInput.test.js
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import TextInput from './TextInput';

describe('TextInput Component', () => {
  // Test rendering with the correct label
  test('renders with the correct label', () => {
    render(<TextInput label="Test Label" />);
    expect(screen.getByText('Test Label')).toBeInTheDocument();
  });

  // Test input value update on change
  test('updates input value on change', () => {
    render(<TextInput label="Test Label" />);
    const input = screen.getByPlaceholderText('Enter comma-separeted values');
    
    fireEvent.change(input, { target: { value: 'test1,test2' } });
    expect(input.value).toBe('test1,test2');
  });

  // Test valuesArray update on change
  test('updates valuesArray on change', () => {
    // Mock console.log to test valuesArray without actual console output
    console.log = jest.fn();
    
    render(<TextInput label="Test Label" />);
    const input = screen.getByPlaceholderText('Enter comma-separeted values');
    
    fireEvent.change(input, { target: { value: 'test1,test2' } });
    expect(console.log).toHaveBeenCalledWith(['test1', 'test2']);
  });

  // Test input value trimming trailing commas on blur
  test('trims trailing commas on blur', () => {
    render(<TextInput label="Test Label" />);
    const input = screen.getByPlaceholderText('Enter comma-separeted values');
    
    fireEvent.change(input, { target: { value: 'test1,test2,' } });
    fireEvent.blur(input);
    expect(input.value).toBe('test1,test2');
  });

  // Additional test cases

  // Test input with multiple commas and spaces
  test('handles input with multiple commas and spaces', () => {
    render(<TextInput label="Test Label" />);
    const input = screen.getByPlaceholderText('Enter comma-separeted values');
    
    fireEvent.change(input, { target: { value: 'test1,   ,test2,, ,test3,' } });
    expect(input.value).toBe('test1,   ,test2,, ,test3,');
    // The valuesArray should not include empty strings or whitespaces
    expect(console.log).toHaveBeenCalledWith(['test1', 'test2', 'test3']);
  });

  // Test no input
  test('handles no input correctly', () => {
    render(<TextInput label="Test Label" />);
    const input = screen.getByPlaceholderText('Enter comma-separeted values');
    
    fireEvent.change(input, { target: { value: '' } });
    expect(input.value).toBe('');
    expect(console.log).toHaveBeenCalledWith([]);
  });

  // Test input with only spaces
  test('handles input with only spaces', () => {
    render(<TextInput label="Test Label" />);
    const input = screen.getByPlaceholderText('Enter comma-separeted values');
    
    fireEvent.change(input, { target: { value: '    ' } });
    expect(input.value).toBe('    ');
    expect(console.log).toHaveBeenCalledWith([]);
  });
});
