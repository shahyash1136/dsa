import axios from 'axios';
import service from './path-to-service-file'; // adjust path as needed

// Mock the axios.create method and interceptors
jest.mock('axios');

describe('Axios service', () => {
    it('should create an axios instance with the correct base URL', () => {
        expect(axios.create).toHaveBeenCalledWith({ baseURL: '$multiCpBaseUrl' });
    });

    it('should add request and response interceptors to the service', () => {
        const requestInterceptor = service.interceptors.request.handlers[0];
        const responseInterceptor = service.interceptors.response.handlers[0];

        // Test request interceptor
        expect(requestInterceptor.fulfilled).toBeInstanceOf(Function);
        expect(requestInterceptor.rejected).toBeInstanceOf(Function);

        // Test response interceptor
        expect(responseInterceptor.fulfilled).toBeInstanceOf(Function);
        expect(responseInterceptor.rejected).toBeInstanceOf(Function);
    });

    it('should return the config in the request interceptor', () => {
        const config = { url: '/test' };
        const result = service.interceptors.request.handlers[0].fulfilled(config);
        expect(result).toBe(config);
    });

    it('should return the response data in the response interceptor', async () => {
        const response = { data: 'responseData' };
        const result = await service.interceptors.response.handlers[0].fulfilled(response);
        expect(result).toBe(response.data);
    });

    it('should reject with error in the request interceptor if an error occurs', async () => {
        const error = new Error('Request Error');
        const result = service.interceptors.request.handlers[0].rejected(error);
        await expect(result).rejects.toBe(error);
    });

    it('should reject with error in the response interceptor if an error occurs', async () => {
        const error = new Error('Response Error');
        const result = service.interceptors.response.handlers[0].rejected(error);
        await expect(result).rejects.toBe(error);
    });
});
