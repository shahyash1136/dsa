import axios from 'axios';
import service from './service'; // Import your service

// Mock the entire axios module
jest.mock('axios');

// Create mock functions for interceptors
const mockRequestInterceptor = jest.fn();
const mockResponseInterceptor = jest.fn();

// Create a mock instance of axios
const mockAxiosInstance = {
  request: jest.fn(),
  interceptors: {
    request: { use: mockRequestInterceptor, eject: jest.fn() },
    response: { use: mockResponseInterceptor, eject: jest.fn() }
  },
  defaults: {
    baseURL: '$multiCpBaseUrl'
  }
};

// Mock axios.create() to return the mock instance
axios.create.mockReturnValue(mockAxiosInstance);

describe('Axios Service', () => {
  let mockConfig;

  beforeEach(() => {
    mockConfig = { url: '/test', method: 'get' };
  });

  it('should have the correct baseURL', () => {
    expect(service.defaults.baseURL).toBe('$multiCpBaseUrl');
  });

  it('should pass request configuration unchanged in request interceptor', async () => {
    // Mock successful request
    mockAxiosInstance.request.mockResolvedValue({ data: {} });

    // Trigger the request
    const response = await service(mockConfig);

    // Expect the request config to remain the same
    expect(mockAxiosInstance.request).toHaveBeenCalledWith(mockConfig);
    expect(response).toEqual({});
  });

  it('should handle request error in request interceptor', async () => {
    const testError = new Error('Request error');

    // Mock request error
    mockAxiosInstance.request.mockRejectedValue(testError);

    // Call the service and expect it to throw the error
    await expect(service(mockConfig)).rejects.toThrow(testError);
  });

  it('should return response data from the response interceptor', async () => {
    const mockData = { message: 'success' };

    // Mock successful response
    mockAxiosInstance.request.mockResolvedValue({ data: mockData });

    const response = await service(mockConfig);

    // Expect the response data to be passed through the response interceptor
    expect(response).toEqual(mockData);
  });

  it('should handle response error in response interceptor', async () => {
    const testError = new Error('Response error');

    // Mock failed response
    mockAxiosInstance.request.mockRejectedValue(testError);

    // Call the service and expect it to throw the error
    await expect(service(mockConfig)).rejects.toThrow(testError);
  });
});
