import axios from 'axios';
import service from './path-to-service-file'; // adjust path as needed

// Mock axios
jest.mock('axios');

describe('Axios service', () => {
    let axiosCreateMock;
    let interceptors;

    beforeEach(() => {
        interceptors = {
            request: {
                use: jest.fn()
            },
            response: {
                use: jest.fn()
            }
        };

        axiosCreateMock = jest.fn().mockReturnValue({
            interceptors
        });
        
        axios.create = axiosCreateMock;
    });

    it('should create an axios instance with the correct base URL', () => {
        expect(axiosCreateMock).toHaveBeenCalledWith({ baseURL: '$multiCpBaseUrl' });
    });

    it('should add request and response interceptors to the service', () => {
        expect(interceptors.request.use).toHaveBeenCalled();
        expect(interceptors.response.use).toHaveBeenCalled();
    });

    it('should handle request interceptor correctly', () => {
        const requestInterceptor = interceptors.request.use.mock.calls[0][0];
        const config = { url: '/test' };
        const result = requestInterceptor(config);
        expect(result).toBe(config);
    });

    it('should handle response interceptor correctly', async () => {
        const responseInterceptor = interceptors.response.use.mock.calls[0][0];
        const response = { data: 'responseData' };
        const result = await responseInterceptor(response);
        expect(result).toBe(response.data);
    });

    it('should handle request interceptor errors correctly', async () => {
        const requestInterceptor = interceptors.request.use.mock.calls[0][1];
        const error = new Error('Request Error');
        const result = requestInterceptor(error);
        await expect(result).rejects.toBe(error);
    });

    it('should handle response interceptor errors correctly', async () => {
        const responseInterceptor = interceptors.response.use.mock.calls[0][1];
        const error = new Error('Response Error');
        const result = responseInterceptor(error);
        await expect(result).rejects.toBe(error);
    });
});
