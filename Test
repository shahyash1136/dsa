import React from "react";
import { render, screen, cleanup, act } from "@testing-library/react";
import '@testing-library/jest-dom/extend-expect';
import DashBoard from "./DashBoard";

jest.mock("react-redux", () => ({
  Provider: ({ children }) => <div>{children}</div>,
}));

jest.mock("./MultiSearchCp", () => () => <div data-testid="multi-search-cp">MultiSearchCp Component</div>);

describe("DashBoard Component", () => {
  let mockStore;

  beforeEach(() => {
    jest.resetAllMocks(); // Reset mocks to clean state before each test
    // Default mock setup for most tests
    mockStore = {
      asyncReducers: {
        multiSearch: true,
      },
      injectReducer: jest.fn(),  // Default mock for injectReducer
    };
  });

  const defaultProps = {
    store: mockStore,
  };

  afterEach(cleanup);

  test("should render loading state initially", () => {
    render(<DashBoard {...defaultProps} />);
    expect(screen.getByText(/nbsp;/)).toBeInTheDocument();
  });

  // Three test cases where data is loaded and custom mock behavior is needed
  test("should handle data loaded state 1", () => {
    // Custom behavior for this test
    mockStore.injectReducer = jest.fn(() => {
      mockStore.isStoreInjectCompleted = true; // Simulate store injection complete
    });

    render(<DashBoard {...defaultProps} />);
    expect(mockStore.injectReducer).toHaveBeenCalled();
    // Your assertions here
  });

  test("should handle data loaded state 2", () => {
    // Similar setup as above or different as needed
    mockStore.injectReducer = jest.fn(() => {
      mockStore.isStoreInjectCompleted = true; // Adjust mock implementation
    });

    render(<DashBoard {...defaultProps} />);
    // Your assertions here
  });

  test("should handle data loaded state 3", () => {
    // Setup custom mock for this test
    mockStore.injectReducer = jest.fn(() => {
      mockStore.isStoreInjectCompleted = true; // Adjust mock implementation
    });

    render(<DashBoard {...defaultProps} />);
    // Your assertions here
  });

  test("some other test", () => {
    render(<DashBoard {...defaultProps} />);
    // Assertions for a standard scenario
  });
});
