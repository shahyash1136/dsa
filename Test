import React from "react";
import { render, screen, act } from "@testing-library/react";
import DashBoard from "./DashBoard";
import MultiSearchCp from "./MultiSearchCp";  // Make sure this is properly imported
import CryptoJS from "crypto-js";
import LicenseManager from "ag-grid-enterprise";
import { setKey } from "./LicenseKey";  // Ensure your LicenseKey module is imported

jest.mock("crypto-js");
jest.mock("ag-grid-enterprise");
jest.mock("./MultiSearchCp", () => () => <div data-testid="multi-search-cp">MultiSearchCp</div>);
jest.mock("./LicenseKey", () => ({
  setKey: jest.fn(),
}));

describe("DashBoard component", () => {
  let mockStore;

  beforeEach(() => {
    // Reset the mockStore before each test
    mockStore = {
      asyncReducers: {},
      injectReducer: jest.fn((key, reducer) => {
        mockStore.asyncReducers[key] = reducer;  // Simulate adding the reducer
      }),
    };
  });

  const defaultProps = {
    store: mockStore,
  };

  test("should render MultiSearchCp component when store injection is completed", async () => {
    // Act to simulate rendering and state changes
    await act(async () => {
      render(<DashBoard {...defaultProps} />);
    });

    // Check if injectReducer was called with the correct arguments
    expect(mockStore.injectReducer).toHaveBeenCalledWith("multiSearch", expect.any(Function));

    // Simulate that store injection has completed by checking if the MultiSearchCp component is rendered
    expect(await screen.findByTestId("multi-search-cp")).toBeInTheDocument();
  });

  test("should display loading text when store injection is not completed", async () => {
    // Act to simulate rendering and state changes
    await act(async () => {
      render(<DashBoard {...defaultProps} />);
    });

    // Initially, it should show the loading text since injectReducer hasn't been completed yet
    expect(screen.getByText(/loadingImageNew/i)).toBeInTheDocument();
  });

  test("should call injectReducer with the correct parameters", async () => {
    await act(async () => {
      render(<DashBoard {...defaultProps} />);
    });

    // Verify that the injectReducer function is called with 'multiSearch' and the rootReducer
    expect(mockStore.injectReducer).toHaveBeenCalledWith("multiSearch", expect.any(Function));
  });

  test("should call setKey when the component is mounted", async () => {
    await act(async () => {
      render(<DashBoard {...defaultProps} />);
    });

    // Verify that setKey is called with the correct parameters
    expect(setKey).toHaveBeenCalledWith(expect.any(String), LicenseManager, CryptoJS);
  });

  test("should reset isStoreInjectCompleted to false on component unmount", async () => {
    const { unmount } = render(<DashBoard {...defaultProps} />);

    // Ensure injectReducer has been called and store injection is complete
    await screen.findByTestId("multi-search-cp");

    // Unmount the component to simulate component cleanup
    unmount();

    // Since this state change is internal, we indirectly check if the component was unmounted properly
    // by ensuring no component related to MultiSearchCp exists in the document after unmount
    expect(screen.queryByTestId("multi-search-cp")).not.toBeInTheDocument();
  });
});
