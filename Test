// getDropDown.test.js
import { getDropDown } from './getDropDown';
import service from './api-service';
import config from './config';

// Mock the service module
jest.mock('./api-service', () => jest.fn());

describe('getDropDown', () => {
  beforeEach(() => {
    // Clear all instances and calls to the mock function
    service.mockClear();
  });

  test('should call service with correct parameters', async () => {
    const mockData = { key: 'value' };
    const mockResponse = { data: 'mockData' };

    // Set up the mock implementation for the service
    service.mockResolvedValueOnce(mockResponse);

    const result = await getDropDown(mockData);

    expect(service).toHaveBeenCalledTimes(1);
    expect(service).toHaveBeenCalledWith({
      url: config.API_NAMES.dropdownData,
      method: 'POST',
      data: mockData,
    });
    expect(result).toEqual(mockResponse);
  });

  test('should handle service errors', async () => {
    const mockData = { key: 'value' };
    const mockError = new Error('Service error');

    // Set up the mock implementation for the service to reject with an error
    service.mockRejectedValueOnce(mockError);

    try {
      await getDropDown(mockData);
    } catch (error) {
      expect(service).toHaveBeenCalledTimes(1);
      expect(service).toHaveBeenCalledWith({
        url: config.API_NAMES.dropdownData,
        method: 'POST',
        data: mockData,
      });
      expect(error).toBe(mockError);
    }
  });
});
