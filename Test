import { renderHook, act } from '@testing-library/react-hooks';
import { useDispatch } from 'react-redux';
import useDropDownSelection from './useDropDownSelection';
import { setSelectedValues } from '../../redux/DropDowns/action';

// Mock the redux dispatch and action
jest.mock('react-redux', () => ({
  useDispatch: jest.fn(),
}));

jest.mock('../../redux/DropDowns/action', () => ({
  setSelectedValues: jest.fn(),
}));

describe('useDropDownSelection Hook', () => {
  const mockDispatch = jest.fn();
  
  beforeEach(() => {
    useDispatch.mockReturnValue(mockDispatch);
    jest.clearAllMocks();
  });

  it('should initialize inputValue as an empty array when multiple is true', () => {
    const { result } = renderHook(() => useDropDownSelection('testKey', true));

    expect(result.current.inputValue).toEqual([]);
  });

  it('should initialize inputValue as null when multiple is false', () => {
    const { result } = renderHook(() => useDropDownSelection('testKey', false));

    expect(result.current.inputValue).toBeNull();
  });

  it('should handle input change when multiple is true', () => {
    const { result } = renderHook(() => useDropDownSelection('testKey', true));

    const mockEvent = {}; // Simulate event if needed
    const mockValue = ['Option1', 'Option2'];

    act(() => {
      result.current.onInputChange(mockEvent, mockValue);
    });

    // Verify inputValue state is updated correctly
    expect(result.current.inputValue).toEqual(mockValue);

    // Verify dispatch is called with correct values
    expect(mockDispatch).toHaveBeenCalledWith(setSelectedValues('testKey', mockValue));
  });

  it('should handle input change when multiple is false', () => {
    const { result } = renderHook(() => useDropDownSelection('testKey', false));

    const mockEvent = {};
    const mockValue = 'Option1';

    act(() => {
      result.current.onInputChange(mockEvent, mockValue);
    });

    // Verify inputValue state is updated correctly
    expect(result.current.inputValue).toEqual(mockValue);

    // Verify dispatch is called with correct values
    expect(mockDispatch).toHaveBeenCalledWith(setSelectedValues('testKey', mockValue));
  });

  it('should set inputValue to null when value is null and multiple is false', () => {
    const { result } = renderHook(() => useDropDownSelection('testKey', false));

    act(() => {
      result.current.onInputChange({}, null);
    });

    expect(result.current.inputValue).toBeNull();
    expect(mockDispatch).toHaveBeenCalledWith(setSelectedValues('testKey', null));
  });

  it('should set inputValue to an empty array when value is null and multiple is true', () => {
    const { result } = renderHook(() => useDropDownSelection('testKey', true));

    act(() => {
      result.current.onInputChange({}, null);
    });

    expect(result.current.inputValue).toEqual([]);
    expect(mockDispatch).toHaveBeenCalledWith(setSelectedValues('testKey', null));
  });

  it('should set inputValue to an empty array when value is empty and multiple is true', () => {
    const { result } = renderHook(() => useDropDownSelection('testKey', true));

    act(() => {
      result.current.onInputChange({}, []);
    });

    expect(result.current.inputValue).toEqual([]);
    expect(mockDispatch).toHaveBeenCalledWith(setSelectedValues('testKey', null));
  });
});
