import axios from 'axios';
import service from './service';  // Import the service

jest.mock('axios'); // Mock the entire axios module

describe('Axios Service', () => {
  let mockConfig;

  beforeEach(() => {
    mockConfig = { url: '/test', method: 'get' };
    axios.create.mockReturnValue(axios); // Make sure axios.create returns the mock axios
  });

  it('should have the correct baseURL', () => {
    expect(service.defaults.baseURL).toBe('$multiCpBaseUrl');
  });

  it('should pass request configuration unchanged in request interceptor', async () => {
    // Mock the request interceptor
    axios.request.mockResolvedValue({ data: {} });

    // Trigger the request
    const response = await service(mockConfig);

    // Expect request config to remain the same
    expect(axios.request).toHaveBeenCalledWith(mockConfig);
    expect(response).toEqual({}); // since we return response.data in the response interceptor
  });

  it('should handle request error in request interceptor', async () => {
    const testError = new Error('Request error');

    // Mock request error
    axios.request.mockRejectedValue(testError);

    // Call the service and expect it to throw the error
    await expect(service(mockConfig)).rejects.toThrow(testError);
  });

  it('should return response data from the response interceptor', async () => {
    const mockData = { message: 'success' };

    // Mock a successful response
    axios.request.mockResolvedValue({ data: mockData });

    const response = await service(mockConfig);

    // Expect the response data to be passed through the response interceptor
    expect(response).toEqual(mockData);
  });

  it('should handle response error in response interceptor', async () => {
    const testError = new Error('Response error');

    // Mock a failed response
    axios.request.mockRejectedValue(testError);

    // Call the service and expect it to throw the error
    await expect(service(mockConfig)).rejects.toThrow(testError);
  });
});
