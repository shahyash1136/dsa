import React from "react";
import { render, screen, cleanup } from "@testing-library/react";
import '@testing-library/jest-dom/extend-expect';
import DashBoard from "./DashBoard";

// Mock necessary imports
jest.mock("crypto-js", () => ({ AES: { encrypt: jest.fn() } }));
jest.mock("ag-grid-enterprise", () => ({ LicenseManager: jest.fn() }));
jest.mock("./MultiSearchCp", () => () => <div data-testid="multi-search-cp">MultiSearchCp Component</div>);
jest.mock("./LicenseKey", () => ({
  text: "mockText",
  setKey: jest.fn(),
}));

// Mock react-redux's Provider
jest.mock('react-redux', () => ({
  Provider: ({ children }) => <div>{children}</div>,
}));

describe("DashBoard Component", () => {
  let mockStore;

  beforeEach(() => {
    jest.clearAllMocks(); // Clear all mocks before each test
    
    // Manually mock the store object with asyncReducers and injectReducer
    mockStore = {
      asyncReducers: {
        multiSearch: false,  // Default: Reducer not injected
      },
      injectReducer: jest.fn(),  // Mock injectReducer
      getState: jest.fn(() => ({
        asyncReducers: { multiSearch: false }, // Return initial asyncReducers state
      })),
      dispatch: jest.fn(), // Mock dispatch function (if needed)
      subscribe: jest.fn(), // Mock subscribe function (if needed)
    };
  });

  const defaultProps = {
    store: mockStore,
  };

  afterEach(cleanup);

  test("should display loading state initially", () => {
    render(<DashBoard {...defaultProps} />);
    
    // Expect the loading state to be rendered initially
    expect(screen.getByText(/nbsp;/)).toBeInTheDocument();
  });

  test("should inject the reducer when store is provided", () => {
    render(<DashBoard {...defaultProps} />);
    
    // Ensure injectReducer is called with the correct arguments
    expect(mockStore.injectReducer).toHaveBeenCalledWith("multiSearch", expect.anything());
  });

  test("should display MultiSearchCp component when reducer is injected", () => {
    // Simulate that the reducer is injected into the store
    mockStore.asyncReducers.multiSearch = true;

    render(<DashBoard {...defaultProps} />);

    // Ensure that the MultiSearchCp component is rendered
    expect(screen.getByTestId("multi-search-cp")).toBeInTheDocument();
  });

  test("should call setKey with correct arguments", () => {
    render(<DashBoard {...defaultProps} />);

    const { text, setKey } = require("./LicenseKey");
    const LicenseManager = require("ag-grid-enterprise");

    // Ensure setKey is called with expected parameters
    expect(setKey).toHaveBeenCalledWith(text, LicenseManager, expect.anything());
  });

  test("should not render MultiSearchCp if store.asyncReducers.multiSearch is false", () => {
    // Set asyncReducers.multiSearch to false to simulate no reducer injected
    mockStore.asyncReducers.multiSearch = false;

    render(<DashBoard {...defaultProps} />);

    // Ensure the MultiSearchCp is not rendered and loading is shown
    expect(screen.queryByTestId("multi-search-cp")).not.toBeInTheDocument();
    expect(screen.getByText(/nbsp;/)).toBeInTheDocument();
  });
});
